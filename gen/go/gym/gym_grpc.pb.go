// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: gym/gym.proto

package gymv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gym_List_FullMethodName         = "/gym.Gym/List"
	Gym_GetSchedules_FullMethodName = "/gym.Gym/GetSchedules"
)

// GymClient is the client API for Gym service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GymClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error)
}

type gymClient struct {
	cc grpc.ClientConnInterface
}

func NewGymClient(cc grpc.ClientConnInterface) GymClient {
	return &gymClient{cc}
}

func (c *gymClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Gym_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gymClient) GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error) {
	out := new(GetSchedulesResponse)
	err := c.cc.Invoke(ctx, Gym_GetSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GymServer is the server API for Gym service.
// All implementations must embed UnimplementedGymServer
// for forward compatibility
type GymServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	GetSchedules(context.Context, *GetSchedulesRequest) (*GetSchedulesResponse, error)
	mustEmbedUnimplementedGymServer()
}

// UnimplementedGymServer must be embedded to have forward compatible implementations.
type UnimplementedGymServer struct {
}

func (UnimplementedGymServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGymServer) GetSchedules(context.Context, *GetSchedulesRequest) (*GetSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedules not implemented")
}
func (UnimplementedGymServer) mustEmbedUnimplementedGymServer() {}

// UnsafeGymServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GymServer will
// result in compilation errors.
type UnsafeGymServer interface {
	mustEmbedUnimplementedGymServer()
}

func RegisterGymServer(s grpc.ServiceRegistrar, srv GymServer) {
	s.RegisterService(&Gym_ServiceDesc, srv)
}

func _Gym_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gym_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gym_GetSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GymServer).GetSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gym_GetSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GymServer).GetSchedules(ctx, req.(*GetSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gym_ServiceDesc is the grpc.ServiceDesc for Gym service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gym_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.Gym",
	HandlerType: (*GymServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Gym_List_Handler,
		},
		{
			MethodName: "GetSchedules",
			Handler:    _Gym_GetSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gym/gym.proto",
}
